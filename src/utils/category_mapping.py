"""
Category mapping system for two-tier categorization
Maps LLM-generated sub-categories to predefined main categories
"""

from typing import Dict, List, Optional

# Main category definitions with their associated sub-categories
MAIN_CATEGORY_MAPPING: Dict[str, List[str]] = {
    "Technology": [
        "artificial intelligence", "machine learning", "deep learning", "neural networks",
        "programming", "software development", "web development", "mobile development",
        "data science", "data analysis", "databases", "cloud computing", "cybersecurity",
        "blockchain", "cryptocurrency", "automation", "robotics", "iot", "apis",
        "frameworks", "libraries", "tools", "devops", "testing", "debugging"
    ],
    
    "Business": [
        "entrepreneurship", "startups", "business strategy", "marketing", "sales",
        "finance", "accounting", "investment", "economics", "management", "leadership",
        "project management", "operations", "hr", "human resources", "consulting",
        "business development", "partnerships", "negotiations", "customer service",
        "branding", "advertising", "market research", "analytics", "kpis", "metrics"
    ],
    
    "Personal Development": [
        "productivity", "time management", "goal setting", "habits", "mindset",
        "learning", "education", "skills", "career", "networking", "communication",
        "public speaking", "writing", "creativity", "innovation", "problem solving",
        "decision making", "critical thinking", "emotional intelligence", "wellness",
        "health", "fitness", "meditation", "mindfulness", "self-improvement"
    ],
    
    "Science": [
        "physics", "chemistry", "biology", "mathematics", "statistics", "research",
        "experiments", "methodology", "analysis", "theory", "hypothesis", "data",
        "scientific method", "peer review", "publications", "academia", "laboratory",
        "instruments", "measurements", "observations", "discoveries", "innovations"
    ],
    
    "Creative": [
        "design", "art", "music", "writing", "photography", "video", "animation",
        "storytelling", "content creation", "creative process", "inspiration",
        "aesthetics", "visual design", "user experience", "user interface",
        "graphic design", "illustration", "digital art", "traditional art",
        "creative tools", "creative techniques", "artistic expression"
    ],
    
    "Knowledge Management": [
        "note taking", "information organization", "knowledge base", "documentation",
        "research methods", "information retrieval", "knowledge sharing",
        "learning systems", "memory techniques", "study methods", "information architecture",
        "content management", "digital organization", "personal knowledge management",
        "second brain", "zettelkasten", "pkm", "knowledge graphs"
    ]
}

# Reverse mapping for quick lookup
SUB_TO_MAIN_MAPPING: Dict[str, str] = {}
for main_cat, sub_cats in MAIN_CATEGORY_MAPPING.items():
    for sub_cat in sub_cats:
        SUB_TO_MAIN_MAPPING[sub_cat.lower()] = main_cat

def get_main_category(sub_category: str) -> str:
    """
    Determine the main category for a given sub-category
    
    Args:
        sub_category: The sub-category (usually generated by LLM)
        
    Returns:
        The corresponding main category, or 'General' if no match found
    """
    if not sub_category:
        return "General"
    
    # Clean and normalize the sub-category
    clean_sub = sub_category.lower().strip()
    
    # Direct lookup
    if clean_sub in SUB_TO_MAIN_MAPPING:
        return SUB_TO_MAIN_MAPPING[clean_sub]
    
    # Fuzzy matching - check if any keywords are contained in the sub-category
    for sub_cat_key, main_cat in SUB_TO_MAIN_MAPPING.items():
        if sub_cat_key in clean_sub or clean_sub in sub_cat_key:
            return main_cat
    
    # Check if sub-category contains any main category name
    for main_cat in MAIN_CATEGORY_MAPPING.keys():
        if main_cat.lower() in clean_sub:
            return main_cat
    
    # Default fallback
    return "General"

def get_all_main_categories() -> List[str]:
    """Get list of all main categories"""
    return list(MAIN_CATEGORY_MAPPING.keys()) + ["General"]

def get_sub_categories_for_main(main_category: str) -> List[str]:
    """Get all sub-categories for a given main category"""
    return MAIN_CATEGORY_MAPPING.get(main_category, [])

def validate_category_structure(main_category: str, sub_category: str) -> bool:
    """
    Validate that a sub-category belongs to the specified main category
    
    Args:
        main_category: The main category
        sub_category: The sub-category to validate
        
    Returns:
        True if valid, False otherwise
    """
    expected_main = get_main_category(sub_category)
    return expected_main == main_category

def suggest_sub_categories(main_category: str, limit: int = 10) -> List[str]:
    """
    Suggest sub-categories for a given main category
    
    Args:
        main_category: The main category
        limit: Maximum number of suggestions
        
    Returns:
        List of suggested sub-categories
    """
    sub_cats = get_sub_categories_for_main(main_category)
    return sub_cats[:limit] if sub_cats else []